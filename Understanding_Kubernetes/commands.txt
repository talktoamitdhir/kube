-- build an image from dockerfile from the current location
docker build -t talktoamitdhir/kubernetes:build .

-- list all images
docker image ls

-- run particular image in an interactive mode
docker run -it -p 8080:80 talktoamitdhir/kubernetes:multi

-- list down all process inside the container
ps axf
helps debugging, directly from VS.
Container runs all the time during development debugging.

-- build and run image using docker compose
docker-compose up -d --build

-- display the logs
docker-compose logs -f

-- display all running processes in the container
docker-compose ps

-- oppo of up 
docker-compose down 

-- stop docker container with container id starting with de
docker stop de

-- list all running containers
docker container ls || docker ps

-- start already created but stopped container with container id b4
docker container start -it b4

-- inspect the JSON of running container to get infor like IP address
docker inspect d233869bce17

-- run particular command in running container - helps in debugging some time
docker exec -it d233869bce17   cmd.exe

-- working directory
pwd

-- login to docker hub regist
docker login

-- pull image from regis
docker image pull mcr.microsoft.com/dotnet/sdk:3.1

-- push image to regis
docker push talktoamitdhir/kubernetes

-- bernetes 
-- get all kubernetes details
kubectl get all 

-- Get version
kubectl version

-- Get Cluster information
kubectl cluster-info

-- Get all the pod details
kubectl get pods

-- Run kubernetes dashboard
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml

-- bernetes Dashboard - get the token
kubectl describe secret -n kube-system
kubectl proxy
http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/overview?namespace=default
Paste the token and UI is there.

-- Run the image as a post
kubectl run ttad -p=8080:80  --image=talktoamitdhir/kubernetes:linux

-- Port Forwarding in kubectl
kubectl port-forward ttad 8080:80

-- Delete the pod
bectl delete pod [name of the pod]

-- Delete the Pod
kubectl delete pod podname

-- perform a trial create  
kubectl create -f filename --dry-run --validate=true

-- apply YAML file
kubectl apply -f filepath.

-- Get YAML of a kubectl resource - equivalent to inspect
kubectl get pod web-api -o yaml

or 

kubectl describe pod pod name

-- Equivalent to exec in docker
kubectl exec web-api (name of the pod) -it sh

-- Pod Level Logging
kubectl logs [Pod Name]

-- Get bectl namespaces
kubectl get namespaces.

-- Set the Namespace for current context for rest of the bectl commands
kubectl config set-context --current --namespace=<insert-namespace-name-here>
# Validate it
kubectl config view --minify | grep namespace:

-- To see which Kubernetes resources are and aren't in a namespace:
# In a namespace
kubectl api-resources --namespaced=true

# Not in a namespace
kubectl api-resources --namespaced=false

-- 










